{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Before to start","text":"<ul> <li> <p>If you don't know anything about glacier processes, explore this great website. If you don't know anything about glacier evolution modeling, you may watch first this video, which gives some basics. </p> </li> <li> <p>OS: IGM was developed in a Linux environment but works on Windows and Mac. Windows user are strongly recommended to use WSL2 for using the GPU and the OGGM shop module. </p> </li> <li> <p>Disclaimer: IGM implements empirical physical laws, with an important amount of approximations (of any kind). Make sure to understand what you do, to explore key parameters, and interpret the results with care.</p> </li> </ul>"},{"location":"#how-to-start","title":"How to start","text":"<p>Running IGM consists of running a python script <code>igm_run</code>, which is made of functions of the IGM python package. This documentation will help you to understand the parameters and, set-up your model by listing the modules you need, customize your own modules for your application.</p> <ul> <li> <p>First, start with the 10-min video tutorial, or a longer IGS seminar presentation, and/or look at the in-progress IGM technical paper.</p> </li> <li> <p>Then, install an igm python environment on your system and starting with examples.</p> </li> <li> <p>Then, learn how to run IGM with module list and parameter setting (without extra coding), and explore the module documentation.</p> </li> <li> <p>Last, understand the code and write your own module code. </p> </li> </ul>"},{"location":"About_GPUs/","title":"About GPUs","text":"<p>IGM works fine on CPU for small computational domains (typically individual glaciers). In contrast, GPUs will be very advantageous to treat very large computational grids (typically large networks of glaciers) as IGM naturally takes further benefit from parallelism. </p> Resolution Minimum computational ressource 0.25 K: 256 x 192 pixel CPU 1 K   : 1024 x 768 pixel laptop GPU    e.g., RTX A4000 4 K   : 3840 x 2160 pixel excellent GPU  e.g., RTX 4090 <p>To illustrate this, I modeled the ice dynamics and glacier evolution over New Zealand by forcing the mass balance with an ELA oscillating between 1000 and 2000 meters a.s.l. The 1000-year-long simulation took about 1.5 hours on the Nvidia RTX 3090 GPU with a 640x700 km computational domain at 200 meters of resolution (i.e. 3200x3500 grid). The animation can be visualized on this link.</p>"},{"location":"Credits_and_references/","title":"References","text":"<p>There is currently an in-progress IGM technical paper that will give you an overview of the physical components, modules, and capabilities of IGM.</p> <p>If you use IGM in publications, make sure to cite one of the following papers and the code version you used.</p> <pre><code>@article{IGM,\n  author       = \"Jouvet, Guillaume and Cordonnier, Guillaume and Kim, Byungsoo and L\u00fcthi, Martin and Vieli, Andreas and Aschwanden, Andy\",  \n  title        = \"Deep learning speeds up ice flow modelling by several orders of magnitude\",\n  DOI          = \"10.1017/jog.2021.120\",\n  journal      = \"Journal of Glaciology\",\n  year         =  2021,\n  pages        = \"1\u201314\",\n  publisher    = \"Cambridge University Press\"\n}\n\n@article{IGM-inv,\n  author       = \"Jouvet, Guillaume\",\n  title        = \"Inversion of a Stokes ice flow model emulated by deep learning\",\n  DOI          = \"10.1017/jog.2022.41\",\n  journal      = \"Journal of Glaciology\",\n  year         = \"2022\",\n  pages        = \"1--14\",\n  publisher    = \"Cambridge University Press\"\n}\n\n@article{IGM-PINN,\n  title={Ice-flow model emulator based on physics-informed deep learning},\n  author={Jouvet, Guillaume and Cordonnier, Guillaume},\n  journal={Journal of Glaciology},\n  pages={1--15},\n  year={2023},\n  publisher={Cambridge University Press},\n  doi={10.1017/jog.2023.73}\n}\n</code></pre>"},{"location":"Credits_and_references/#acknowledgements","title":"Acknowledgements","text":"<p>I greatly thank Guillaume Cordonnier for his valuable help with the TensorFlow implementation. The Parallel Ice Sheet Model has greatly inspired the naming of variables, as well as the format of input and output NetCDF files.</p>"},{"location":"Custom_Modules/","title":"Custom Modules","text":"<p>It is fairly simple to write your own module in a separate python file and include it in the workflow, e.g. to force a climate and/or surface mass balance model specific to an application. For that, one needs to undestand how IGM is coded.</p>"},{"location":"Custom_Modules/#coding-structure","title":"Coding structure","text":"<p>A closer look at script igm_run.py reveals the following main steps:</p> <ul> <li>Load key libraries (tensorflow and igm):</li> <li>Collect defaults, overide from json file, and parse all core and specific module parameters into params, load custom modules, and get the list of all modules in order:</li> <li>Define a state class/dictionnary that contains all the data (e.g. ice thickness)</li> <li>Initialize, update and finalize all model components in given order after placing on '/CPU:0' or '/GPU:0' device.</li> </ul> <p>Each module have at least 4 functions defined (some may do nothing, but still need to be defined): </p> <ul> <li>a parameter function 'params(parser)' that defines the parameter associated with the module, </li> <li>an initialization function 'initialize(params,state)' that initializes all that needs to be prior to the main time loop, </li> <li>an update function 'update(parser)' that updates the state within the main time loop, </li> <li>a finalize function 'finalize(parser)' that finalizes the module after the time loop.</li> </ul> <p>In <code>igm_run</code>, all variables describing the glacier state at a time t are stored in the <code>state</code> object. All these variable are TensorFlow 2.0 Tensors. Using Tensorflow is key to making computationally efficient operations, especially on GPU. Any variables can be accessed/modified via state.nameofthevariable, e.g.,  ```python state.thk   # is the ice thickness variable state.usurf # is the top surface elevation</p> <pre><code>Variables names are summarized [here](https://github.com/jouvetg/igm/wiki/5.-Variables).\n\n# Creating own module\n\nSimilarly to existing IGM ones, a user-defined module my_module can be implemented in a file my_module.py, which will be will automatically loaded when `igm_run` is executed providing `my_module` is listed in any module list parameters. The implementation must have the 4 functions that permits to defined parameters, initializing, updating, and finalizing. For instance, to implementation of the mass balance function 'sinus' with an oscillating ELA, you may create a module 'mysmb' in a file mysmb.py, which update the object state.smb from other fields and parameters:\n\n```python \n\ndef params(parser):  \n    parser.add_argument(\"--meanela\", type=float, default=3000 )\n\ndef initialize(params,state):\n    pass\n\ndef update(params,state):\n    # perturabe the ELA with sinusional signal \n    ELA = ( params.meanela + 750*math.sin((state.t/100)*math.pi) )\n    # compute smb linear with elevation with 2 acc &amp; abl gradients\n    state.smb  = state.usurf - ELA\n    state.smb *= tf.where(state.smb&lt;0, 0.005, 0.009)\n    # cap smb by 2 m/y \n    state.smb  = tf.clip_by_value(state.smb, -100, 2)\n    # make sure the smb is not positive outside of the mask to prevent overflow\n    state.smb  = tf.where((state.smb&lt;0)|(state.icemask&gt;0.5),state.smb,-10)\n\ndef finalize(params,state):\n    pass\n</code></pre> <p>then, it remains to call these new function and add 'mysmb' to the list of modules as parameter.</p> <p>Note that the four functions (params, init, update, finalize) must be defined even if some are not doing anything (just use <code>pass</code>). You may find coding inspiration / examples looking at the code of IGM modules above.</p> <p>IGM fully relies on TensorFlow 2.0 library for computational efficiency on GPU. All variables (e.g. ice thickness) are TensorFlow tensor objects, which can only be modified using TensorFlow operations. All these operations are vectorial, i.e. they apply simultaneously to all entries of 2D gridded fields, which is key for parallel and efficient execution. This means that one must avoid any sequential operations (typically loop of indices of 2D arrays), and favour TensorFlow (optimized) operations between large arrays (e.g. neural networks). </p> <p>At first sight, a lot of TensorFlow functions look similar to Numpy ones, one can simply do operations by changing numpy to tensorflow, e.g. 'tf.zeros()' instead of 'np.zeros()' with 'import tensorflow as tf' instead of 'import numpy as np'. E.g. Tensorflow operations look like:</p> <pre><code>state.topg  = tf.zeros_like(state.usurf)                                  # define Variable Tensor\nstate.smb   = tf.where(state.usurf &gt; 4000, 0, state.smb)                   # Imposes zero mass balance above 4000 m asl.\nstate.usurf = state.topg + state.thk                                       # Update surface topography with new ice thickness\nstate.smb   = tf.clip_by_value( (state.usurf - ela)*grad , -100, 2.0 )     # Define linear smb wrt z, with capping value\nu = tf.concat( [u[:, 0:1], 0.5 * (u[:, :-1] + u[:, 1:]), u[:, -1:]], 1 )   # work on straggered grid\n</code></pre> <p>In fact, there are two kinds of tensor that are used in IGM. First, \"EagerTensor\" (as shown above) can make many operations, however, we can NOT change specific tensor entries (slicing):</p> <pre><code>tensor = tf.ones((500,300))  \ntensor = (2*tensor + 200)**2\ntensor[1,2] = 5 # WILL NOT WORK\n</code></pre> <p>As a workaround, one uses \"tf.Variable\" that permits to slice, however, the assignment is slightly different, it can not be done with \"=\", but with the \"assign\" function:</p> <pre><code>tensor = tf.Variable(tf.ones((500,300)))\ntensor.assign( (2*tensor + 200)**2 )\ntensor[1,2].assign( 5 ) # WORKS !\n</code></pre> <p>IGM combines both types of tensors, so make sure to identify what is your type, other TF will produce an error.</p> <p>For the best computational efficiency, it is crucial to keep all variables and operations within the TensorFlow framework without using Numpy (to avoid unnecessary transfers between GPU and CPU memory). There is the possibility to generate TensorFlow function using Numpy code, check at this page.</p> <p>The best way to learn how to code with tensorflow within the context of IGM is to explore module codes, or to look at examples.</p>"},{"location":"Custom_Modules/#overriding-modules","title":"Overriding modules","text":"<p>Sometime, it may happen that you would like to bring a minor modification to an existing module. If so, no need to copy/paste the entire module and bring your modification, you may simply define a module with the same name existingmodule.py that contains only the function you would like to modify. All other function will be taken from the orginal module. For instance, this IGM example implements a special seeding strategy for the particle module in user-defined particles.py. Only two functions of the module are changed.</p>"},{"location":"Custom_Modules/#sharing-your-module","title":"Sharing your module","text":"<p>If you have developed a module that you believe may be useful to the community and be shared within igm package, read this section carefully. First, give a meaningful name to your module, and try to match the structure of other existing modules for consistency. Please name modulename.py and modulename.md the python and the documentation files, respectively. The parameter list coming at the end of modulename.md in the doc folder will be generated automatically, so you don't need to do it yourself. Please make sure to name all parameters of your module with a 4 letter long keyword that shorten the name of your module. This permits to prevent against conflicts between parameter names of different modules. Once all of this is achieve, you may contact me, or do a pull request.</p>"},{"location":"Examples/","title":"Examples","text":"<p>The best and quickest way to get to know IGM is to run given examples. Having IGM installed on your machine, you can simply run <code>igm_run</code> in a folder that contains the following parameter file <code>params.json</code>:</p> <pre><code>{\n  \"modules_preproc\": [\"oggm_shop\"],\n  \"modules_process\": [\"clim_oggm\",\n                      \"smb_oggm\",\n                      \"iceflow\",\n                      \"time\",\n                      \"thk\"\n                      ],\n  \"modules_postproc\": [\"write_ncdf\",\n                       \"plot2d\",\n                       \"print_info\",\n                       \"print_comp\"],\n  \"clim_oggm_clim_trend_array\": [\n                        [\"time\", \"delta_temp\", \"prec_scal\"],\n                        [ 1900,           0.0,         1.0],\n                        [ 2020,           0.0,         1.0],\n                        [ 2100,           4.0,         1.0]\n                                 ],\n  \"oggm_RGI_ID\": \"RGI60-11.01450\",\n  \"time_start\": 1800.0,\n  \"time_end\": 2100.0,\n  \"plt2d_live\": true,\n  \"iflo_init_slidingco\": 0.25\n}\n</code></pre> <p>You may run other ready-to-use examples in the folder <code>test/examples/</code> in the develop version, which contains input data and parameter files. To run the example, just go in each folder and run <code>igm_run</code> there. You have the following examples available:</p> <ul> <li> <p>quick-demo provides a set-up to model any glacier given an RGI ID, with a OGGM-based climate forcing and SMB. </p> </li> <li> <p>quick-demo-mysmb is like quick-demo but wirh a own user-defined SMB module / parametrization.</p> </li> <li> <p>aletsch-basic provides a simple set-up for an advance-retreat simulation of the largest glacier of the European Alps -- Aletsch Glacier, Switzerland -- using a simple parametrization of the mass balance based on time-varying Equilibrium Line Altitudes (ELA).</p> </li> <li> <p>aletsch-1880-2100 gives the set-up to reproduce the simulations of the Great Aletsch Glacier (Switzerland) in the past and in the future based on the CH2018 climate scenarios and an accumulation/melt model.</p> </li> <li> <p>aletsch-invert and rhone-invert gives an example of data assimilation with IGM (Warning: inverse modelling requires tuning parameters for each glacier). rhone-invert is the most advanced/recent setting.</p> </li> <li> <p>paleo-alps consists of a simple set-up to run a paleo glacier model in the European Alps in paleo times with different catchments (lyon, ticino, rhine, linth glaciers) with IGM around the last glacial maximum (LGM, about 24 BP in the Alps).</p> </li> <li> <p>synthetic permits to make simple numerical experiments with simple synthetic bedrock topographies.</p> </li> </ul>"},{"location":"FAQ/","title":"FAQ","text":"<ul> <li>Ice is stuck on the border of the domain (no fluxes), what can I do?</li> </ul> <p>Set parameter exclude_borders_from_iceflow to True</p> <ul> <li>I see some numerical artifacts (e.g. waves) occurring when modeling glacier evolution, what can I do?</li> </ul> <p>Reduce the CFL parameter</p> <ul> <li>How to create/modify NetCDF files?</li> </ul> <p>There are many ways to prepare NetCDF files (matlab, python, GIS tools, ...). The NCO toolkit permits easy operations in command lines, e.g.</p> <pre><code>   ncks -x -v thk file.nc file.nc              # this removes the variable 'thk' from file.nc\n   ncks -v usurf file.nc file.nc               # this extracts the variable usurf from file.nc\n   ncap2 -h -O -s 'thk=0*thk' file.nc file.nc  # this does operations on file.nc, here force zero thk\n   ncrename -v apc,strflowctrl file.nc         # this renames varible apc to strflowctrl in file.nc\n</code></pre> <ul> <li>oggm_shop produces error on windows</li> </ul> <p>This is expected, OGGM is not supported on windows, however, modifying the tarfile.py file at line 2677 from name == member_name to name.replace(os.sep, '/') == member_name seems to fix the issue on Windows. Thanks Alexi Morin for proposing this workaround.</p>"},{"location":"Installation/","title":"Installation","text":"<p>IGM is a Python package, which works on any OS on </p> <ul> <li>CPU (not computationally efficient, but fine for small applications like individual glaciers),</li> <li>GPU (the most computationally efficient way, especially relevant for large-scale and high-resolution applications). </li> </ul> <p>IGM can be installed with the </p> <ul> <li>the main version for stable application (the latest available tag), not all modules,</li> <li>the development version to get the latest feature with all modules (at the possible price of unrevealed bugs). </li> </ul> <p>Both versions are now on the same (main) branch. IGM is rapidly changing, keep track of updates on the release page for the tagged versions or/and on this page for the development version.</p> <p>Note that the igm package installs most of dependent packages, but not all. For using some post-processing modules, the user has to install additional packages (e.g., mayavi, plotly, ect.).</p> <p>We first describe the installation in Linux (the preferred OS), and then on Windows and Mac.</p>"},{"location":"Installation/#linux","title":"Linux","text":"<ol> <li>Install NVIDIA drivers</li> </ol> <p>If you aim to use only the CPU or already get an output from <code>nvidia-smi</code>, you can skip this step.</p> <pre><code>\n# get the latest libraries from apt\nsudo apt update\nsudo apt upgrade\n\n# choose which driver version is compatible with your GPU device (in this case 510)\nsudo apt install nvidia-driver-510 nvidia-dkms-510\nsudo reboot # you wont see the changes until after you reboot\n</code></pre> <p>After rebooting, you can check your driver version with the command <code>watch -d -n 0.5 nvidia-smi</code> should give you live information on your GPU device.</p> <ol> <li>Install anaconda and create a virtual environment (strongly recommended) with conda or venv:</li> </ol> <pre><code># install anaconda\nwget https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh\nbash Anaconda3-2023.09-0-Linux-x86_64.sh\n\n# create new environment\nconda create --name igm python=3.10\n\n# activate environment to install IGM\nconda activate igm\n</code></pre> <p>or</p> <pre><code># create igm venv environment\npython3.10 -m venv igm\n\n# activate environment to install IGM\nsource igm/bin/activate\n</code></pre> <ol> <li>Install IGM</li> </ol> <p>For simple usage, you can install the latest IGM stable version and its dependencies from the Pypi as follows:</p> <pre><code>pip install igm_model\n</code></pre> <p>OR for using all and recent features, you can install the IGM development version from the github repository as follows:</p> <pre><code>git clone https://github.com/jouvetg/igm.git\ncd igm\npip install -e .\n</code></pre> <p>After that, you may run any example (<code>igm_run</code>). As IGM is being updated often, make sure you have the latest version, you may run</p> <pre><code>git pull\n</code></pre>"},{"location":"Installation/#windows","title":"Windows","text":"<p>Tensorflow does not allow us to run IGM on GPU directly on Windows, and the module <code>oggm_shop</code> does not work on windows. Therefore, we recommend windows-user to install WSL2-ubuntu, which provides a linux/ubuntu terminal. WSL2 terminal can be nicely linked with VS code (with an extension). First, install WSL2-ubuntu</p> <pre><code>wsl --install Ubuntu-22.04\nsudo apt update\nsudo apt upgrade\n</code></pre> <p>and then, install the NVIDIA drivers if not done (if you get no output from <code>nvidia-smi</code>), and if you wish to use the GPU.</p> <p>The rest -- installation of conda or venv environment and the installation of IGM -- are the same as above on Linux.</p>"},{"location":"Installation/#mac","title":"Mac","text":"<p>IGM core library native Tensorflow is not supported on Mac for GPU usage. Instead, a \"Tensorflow for Mac\", called tensorflow-metal, was developed as workaround. To install IGM on Mac, you may follow the linux workflow, however, you will need to change in setup.py tensorflow by tensorflow-macos. Here is a working procedure (tested on MacBook Pro M2) -- still we recommend using a virtual environment such as conda or venv as on linux:</p> <pre><code>git clone -b develop https://github.com/jouvetg/igm\ncd igm\n</code></pre> <p>You need to edit \"install_requires=[...]\" in the file \"setup.py\":</p> <ul> <li>To use only the CPUs: <code>tensorflow-macos==2.14.0</code></li> <li>To use the GPUs: <code>tensorflow-macos==2.14.0, tensorflow-metal,</code></li> </ul> <p>and then</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"Installation/#troubleshooting","title":"Troubleshooting","text":"<p>Main source of issues are linked to Tensorflow and the use of GPU. Hopefully, the installation is significantly easier since tensorflow 2.14.0 since it can install all necessary GPU/cuda dependent packages with the right version automatically. Note that to ensure smooth usage of GPU with cuda and tensorflow libraries, one has to make sure that i) cuda ii) cudnn iii) tensorflow are compatible, and your Nvidia driver is compatible with the version of cuda. Such incompatibility is the most common source of issue. </p> <p>For instance, it is possible do install tensorflow-2.12.0 by setting <code>tensorflow==2.12.0</code> in the setup.py and</p> <pre><code>conda install -c conda-forge cudatoolkit=11.8.0\npip install nvidia-cudnn-cu11==8.6.0.163\n\nmkdir -p ${CONDA_PREFIX}/etc/conda/activate.d\nD=${CONDA_PREFIX}/etc/conda/activate.d/env.sh\necho 'export PYTHONNOUSERSITE=1' &gt;&gt; $D\necho 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CONDA_PREFIX}/lib' &gt;&gt; $D\necho 'export CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $D\necho 'export LD_LIBRARY_PATH=$CONDA_PREFIX/lib/:$CUDNN_PATH/lib:$LD_LIBRARY_PATH' &gt;&gt; $D\n</code></pre>"},{"location":"Running/","title":"Running IGM","text":"<p>Assuming you have installed the right igm environment, the glacier evolution model IGM can be run via the command <code>igm_run</code>: define     igm_run --RGI-ID RGI60-11.01450 --time_start 2023 --time_end 2100</p> <p>where parameters are given in command line as above or in a file params.json (recommended) like </p> <pre><code>{\n  \"modules_preproc\": [\"oggm_shop\"],\n  \"modules_process\": [\"smb_simple\",\"iceflow\",\"time\",\"thk\"],\n  \"modules_postproc\": [\"write_ncdf\",\"plot2d\",\"print_info\",\"print_comp\"],\n  \"oggm_RGI_ID\": \"RGI60-11.01238\",\n  \"time_start\": 2023.0,\n  \"time_end\": 2100.0\n}\n</code></pre> <p>and igm_run.py is a short python script located in the root directory that perform the following steps (check the code for more details):</p> <ul> <li>collect parameters into <code>params</code> object, including the ordered list of modules <code>modules</code>,</li> <li>define a <code>state</code> object that contains all the data (e.g. ice thickness),</li> <li>initialize all model components in turn,</li> <li>update all model components in turn within a time loop from start to end times,</li> <li>finalize all model components in turn.</li> </ul> <p>Therefore running IGM requires to define parameters <code>params</code>, which includes first-of-all the list of wished IGM modules.</p> <p>IGM can also take the parameter file as input as follows: <code>igm_run --param_file params1.json</code></p>"},{"location":"Running/#parameters-params-full-list","title":"Parameters (<code>params</code>, full list)","text":"<p>IGM has a few core parameters:</p> short long default help <code>--param_file</code> <code>params.json</code> Parameter file <code>--modules_preproc</code> <code>[\"prepare_data\"]</code> List of pre-processing modules <code>--modules_process</code> <code>[\"iceflow\",\"time\",\"thk\"]</code> List of processing modules <code>--modules_postproc</code> <code>[\"write_ncdf\",\"print_info\"]</code> List of post-processing modules <code>--logging</code> <code>False</code> Activate the logging <p>and many other module-specific parameters, see the full list of parameters or the  module documentation for the meaning and default values of the parameters of each module. Parameters passed in command line override those passed in the jon parameter file, which override the default IGM parameters.</p>"},{"location":"Running/#modules-modules","title":"Modules (modules)","text":"<p>IGM is organized module-wise. Each user must pick a sequence of existing pre-processing, processing, post-processing and/or user-made modules she/he wishes to have for her/his application (check at the module documentation. Each module implements all least 4 functions for module-specific parameter definition, initialization, update and finalization, which are called by <code>igm_run</code>. This section helps to chose the appropriate module. First one needs pre-processing modules:</p> <ul> <li>For modelling individual present-day glacier, the best is to use the OGGM-based <code>prepare_data</code> module, which take care of downloading all the gridded data appropriatly. In that case, the <code>modules_preproc</code> in the json parameter file look like: </li> </ul> <pre><code>   \"modules_preproc\": [\"oggm_shop\"], \n</code></pre> <ul> <li> <p>Alternatively to module <code>oggm_shop</code>, one may load the data directly NetCDF file (with module <code>load_ncdf</code>), tif file (with module <code>load_tif</code>) or from analytical formula for synthetic glacier tests (<code>synthetic</code>).</p> </li> <li> <p>Optionally the additional module <code>optimize</code> permits to do data assimilation seeking for ice thickness distribution, ice flow parameters that yield the best fit with data (e.g. surface ice speeds). In that case, the `modules_preproc in the json parameter file look like: </p> </li> </ul> <pre><code>\"modules_preproc\": [\"prepare_data\",\"optimize\"],\n</code></pre> <p>Second one needs to define processing modules:</p> <ul> <li>The minimum to have as processing is the combination of ice flow (module <code>iceflow</code>), ice thickness (module <code>thk</code>), and time step (module <code>time</code>):</li> </ul> <pre><code>  \"modules_process\": [\"iceflow\"\",\"time\",\"thk\"],\n</code></pre> <ul> <li>However, it sounds reasonable to add at least a surface mass balance module (e.g. <code>smb_simple</code>), and other components we like to have (e.g. computation of vertical velocity, particle trajectory, climate, enthalpy, ...) making sure to respect a logical order, i.e., </li> </ul> <pre><code>  \"modules_process\": [\"smb_simple\",\"iceflow\",\"time\",\"thk\",\"vert_flow\",\"particles\"],\n</code></pre> <p>Then, one needs post-processing modules to output the results of the model, e.g. this line will permit to write model output in NetCDF files, make 2D plots, print basic informatinN (e.g. ice volume), and produce a nice 3D animation of the run at the end:</p> <pre><code>  \"modules_postproc\": [ \"write_ncdf\", \"plot2d\", \"print_info\",  \"anim_mayavi\" ]\n</code></pre> <p>Lastly, one often needs to customize the code for specific applications. This is easy to do so with IGM, e.g. for imposing own climate forcing, defining own surface mass balance, ... For that purpose, implement your module in a separate file my_mod.py, and add it to the workflow</p> <pre><code>  \"modules_process\": [\"smb_simple\",\"iceflow\",\"time\",\"thk\",\"my_mod\"],\n</code></pre> <p>then, the module will be automatically loaded by <code>igm_run</code> when being executed.</p>"},{"location":"Variables/","title":"Variables","text":"<p>Whenever this is possible, IGM adopts name convention of PISM. Here is a minimal list of key variables:</p> Variable names Shape Description Unit t () Time variable (scalar) y dt () Time step (scalar) y x,y (nx) Coordinates vectors m thk (ny) Ice thickness m topg (ny,nx) Basal topography (or bedrock) m usurf (ny,nx) Surface topography m smb (ny,nx) Surface Mass Balance m/y ice-eq ubar (ny,nx) x- depth-average velocity of ice m/y vbar (ny,nx) y- depth-average velocity of ice m/y U (nz,ny,nx) x-horiz. 3D velocity field of ice m/y V (nz,ny,nx) y-horiz. 3D velocity field of ice m/y W (nz,ny,nx) z-vert.  3D velocity field of ice m/y arrhenius (ny,nx) Arrhenius Factor MPa^(-3) y^(-1) slidingco (ny,nx) Sliding Coefficient MPa m^(-1/3) y^(-1/3) divflux (ny,nx) Divergence of the flux m/y icemask (ny,nx) Mask to restrict the smb comp. - dtopgdt (ny,nx) Erosion rate m/y xpos,ypos (nb particles) x,y position of particles m rhpos (nb particles) rel. pos of particles in ice column m air_temp (nt,ny,nx) seasonal air temperature 2 m above ground \u00b0C precipitation (nt,ny,nx) seasonal precipitation (water eq) kg m^(-2) y^(-1)"},{"location":"modules/anim_mayavi/","title":"anim_mayavi","text":""},{"location":"modules/anim_mayavi/#igm-module-anim_3d_from_ncdf_ex","title":"anim_mayavi","text":""},{"location":"modules/anim_mayavi/#title","title":"IGM module <code>anim_3d_from_ncdf_ex</code>","text":""},{"location":"modules/anim_mayavi/#description","title":"Description:","text":"<p>This IGM modules makes a 3D animated plot using from the NetCDF output  (default output.nc) file produced by module <code>write_ncdf</code>. It only implements the 'finalize' function, the rest ('initialize', 'update') doing nothing.</p> <p>This module depends on the <code>mayavi</code> and <code>pyqt5</code> libraryies, which are not included in the original igm package. Therefore, you need to install it in your python environent:</p> <pre><code>pip install mayavi pyqt5\n</code></pre> <p>Warning: It seems that this module work only with Python &lt;= 3.10</p>"},{"location":"modules/anim_plotly/","title":"anim_plotly","text":""},{"location":"modules/anim_plotly/#igm-module-anim_plotly","title":"anim_plotly","text":""},{"location":"modules/anim_plotly/#title","title":"IGM module <code>anim_plotly</code>","text":""},{"location":"modules/anim_plotly/#description","title":"Description:","text":"<p>This module permits an interactive 3D vizualization of IGM results reading the NetCDF file produced by module <code>write_ncdf</code> based on libraries <code>dash</code> and <code>plotly</code>. It creates a dash app that can be accessed via a browser (the adress printed in the console is usually http://127.0.0.1:8050/).  The app shows a 3D plot of the glacier's surface on top of the surrounding bedrock.  The surface color shows either the ice thickness, the velocity magnitude of the surface or the surface mass balance. Variables can be chosen in the dropdown menu. The app also includes a slider to navigate the different time steps of the glacier simulation.</p> <p>This module depends on the <code>dash</code> and <code>plotly</code> library. Therefore, you need to install it in your python environent:</p> <pre><code>pip install dash plotly\n</code></pre> <p>This module was implemented by Oskar Herrmann.</p>"},{"location":"modules/anim_video/","title":"anim_video","text":""},{"location":"modules/anim_video/#igm-module-anim_video","title":"anim_video","text":""},{"location":"modules/anim_video/#title","title":"IGM module `anim_video``","text":""},{"location":"modules/anim_video/#description","title":"Description:","text":"<p>This IGM module makes an animated mp4 video of ice thickness over time from  the NetCDF output (default output.nc) file produced by module <code>write_ncdf</code>. It only implements the 'finalize' function, the rest ('initialize', 'update') doing nothing.</p> <p>This module depends on <code>xarray</code> library.</p>"},{"location":"modules/avalanche/","title":"avalanche","text":""},{"location":"modules/avalanche/#igm-avalanche-module","title":"avalanche","text":""},{"location":"modules/avalanche/#title","title":"IGM avalanche module","text":""},{"location":"modules/avalanche/#description","title":"Description:","text":"<p>This IGM module permits to model redistribution of snow due to avalanches. This routine move ice/snow downslope until the ice surface is everywhere at angle of repose. This function was adapted from  Mark Kessler's GC2D program and implemented in IGM by J\u00fcrgen Mey with support from Guillaume Jouvet.</p>"},{"location":"modules/clim_oggm/","title":"clim_oggm","text":""},{"location":"modules/clim_oggm/#igm-clim_oggm-module","title":"clim_oggm","text":""},{"location":"modules/clim_oggm/#title","title":"IGM clim_oggm module","text":""},{"location":"modules/clim_oggm/#description","title":"Description:","text":"<p>Module <code>clim_oggm</code> reads monthly time series of historical GSWP3_W5E5 climate data collected by the <code>oggm_shop</code> module, and generates monthly 2D raster fields of corrected precipitation, mean temperature, and temperature variability. To achieve this, we first apply a multiplicative correction factor for precipitation (parameter <code>prcp_fac</code>) and a biais correction for temperature (parameter <code>temp_bias</code>). Then, the module extrapolates temperature data to the entire glacier surface using a reference height and a constant lapse rate (parameter <code>temp_default_gradient</code>). In constrast, the point-wise data for precipitation and temperature variablity are extended to the entire domain without further correction. Module <code>oggm_shop</code> provides all calibrated parameters. The resulting fields are intended to be used to force the surface mass balance or enthalpy models.</p> <p>In addition, this module can generate climate outside the time frame of available data. To that aim, we define a reference period with parameter <code>clim_oggm_ref_period</code> to pick randomly years within this interval (usually taken to be a climate-neutral period), and apply a biais in temperature and a scaling of precipitation. These parameters may be given in file (file name given in <code>clim_oggm_file</code> parameter), which look like this (this example gives an linear increase of temperature of 4 degrees by the end of 2100 (with respect to the period 1960-1990):</p> <pre><code>time   delta_temp  prec_scal\n1900          0.0        1.0\n2020          0.0        1.0\n2100          4.0        1.0\n</code></pre> <p>or directly as parameter in the config <code>params.json</code> file:</p> <pre><code>\"clim_oggm_clim_trend_array\": [ \n                     [\"time\", \"delta_temp\", \"prec_scal\"],\n                     [ 1900,           0.0,         1.0],\n                     [ 2020,           0.0,         1.0],\n                     [ 2100,           4.0,         1.0]\n                              ],  \n</code></pre> <p>If parameter <code>clim_oggm_clim_trend_array</code> is set to empty list <code>[]</code>, then it will read the file <code>clim_oggm_file</code>, otherwise it read the array <code>clim_oggm_clim_trend_array</code> (which is here in fact a list of list).</p>"},{"location":"modules/enthalpy/","title":"enthalpy","text":""},{"location":"modules/enthalpy/#igm-enthalpy-module","title":"enthalpy","text":"<p>Warning: this rather complex module was not much tested so far, use it with care!</p>"},{"location":"modules/enthalpy/#title","title":"IGM enthalpy module","text":""},{"location":"modules/enthalpy/#description","title":"Description:","text":"<p>This IGM module models the ice enthalpy, which permits to jointly model the ice temperature, as well as the water content created when the temperature hits the pressure melting points, and therefore energy conservation, which is not the case when modelling the sole temperature variable. The model is described in (Aschwanden and al, JOG, 2012). Here, we used a simplified version largely inspired from the one implemented in PISM. Other references that have helped are (Kleiner and al, TC, 2015) and (Wang and al, 2020).</p>"},{"location":"modules/enthalpy/#model","title":"Model:","text":""},{"location":"modules/enthalpy/#ice-flow","title":"Ice flow","text":"<p>Here we only quickly sketch the components of the ice dynamical modelling necessary for modeling the Enthalpy.</p> <p>Ice is assumed to be a Non Newtonian fluid, gouverned by Glen's flow law: $$ \\tau = A^{-1/n} | D({\\bf u}) |^{1/n-1} D({\\bf u}), $$</p> <p>where $D({\\bf U})$ and $\\tau$ are the strain rate and deviatoric stress tensor, respectively. While a no-stress condition is applied on the top surface, we assume that the basal shear stress  $\\tau_b$ and the sliding velocity $u_b$ are linked by Weertmann power law at the glacier bed interface: $$   \\tau_b = - c | u_b |^{m-1} u_b, $$ where $c=\\tau_c u_{th}^{-m}$ (unit: $Mpa \\; m^{-m} \\; y^m$), $\\tau_c$ being the yield stress and $u_{th}$ being a parameter homegenous to ice velocity. This formalism is taken from PISM.</p> <p>(Note that originally, IGM had $c^{-m}$ instead of $c$ above as \"slidingco\" with $u_{th}=1$. The newest runs under parameters \"new_sliding_param\", and $c$ has unit $MPa \\; m^{-m} \\; y^m$)</p>"},{"location":"modules/enthalpy/#enthalpy","title":"Enthalpy","text":"<p>The Enthalpy $E$ is a 3D variable defined everywhere in the ice as a function of the temperature $T$ and the water content $\\omega$:</p> <p>$$ \\begin{align} E(T, \\omega,p) =  \\left{ \\begin{array}{ll} c_i (T- T_{\\rm ref}), &amp; {\\rm  if } \\; T &lt; T_{\\rm pmp} , \\  E_{\\rm pmp} + L \\omega, &amp; {\\rm if } \\;  T = T_{\\rm pmp} \\; {\\rm and } \\; 0 \\le \\omega, \\end{array}  \\right. \\end{align} $$</p> <p>where $c_i$ is the heat capacity, $T_{ref}$ is the reference temperature, $T_{\\rm pmp} = T_{\\rm pmp}(p) = T_0 - \\beta p$ is the temperature pressure-melting point of ice, $E_{\\rm pmp}(p)$  is the enthalpy pressure-melting point of ice defined as </p> <p>$$ E_{\\rm pmp}(p) = c_i (T_{\\rm pmp}(p) - T_{\\rm ref}), $$</p> <p>where $L$ is the latent heat of fusion. According to the above defintion of enthalpy, we have two possible modes: i) the ice is cold, i.e. below the melting point, and the Enthalpy is simply proportional to the temperature minus a reference temperature ii) the ice is temperate and the Enthalpy continue to grow, the additional component $L \\omega$ corresponding to the creation of water content by energy transfer. Therefore, it is straightforward to deduce $E$ from $T$ and $\\omega$.</p> <p>The enthalpy model consists of the following advection-diffusion equation (the horizontal diffusion being neglected):</p> <p>$$  \\begin{align} &amp; \\rho_i \\left( \\frac{\\partial E}{ \\partial t} + u_x \\frac{\\partial E}{ \\partial x} + u_y \\frac{\\partial E}{ \\partial y}  + u_z \\frac{\\partial E}{ \\partial z} \\right)   - \\frac{\\partial }{\\partial z} \\left( K_{c,t} \\frac{\\partial E}{ \\partial z} \\right) = \\phi - \\rho_w L D_w(\\omega), \\end{align} $$</p> <p>where $\\rho_i$ is the ice density, $K_{c,t}$ equals $K_c = k_i/c_i$ if the ice is cold ($E&lt;E_{pmp}$) or $K_t = \\epsilon k_i/c_i$ otherwise, $\\phi$ is the strain heating defined by (using Glen's flow law)</p> <p>$$ \\phi = D({\\bf U}) \\tau = A^{-1/n} | D({\\bf u}) |^{1+1/n}, $$</p> <p>where $D({\\bf U})$ and $\\tau$ are the strain rate and deviatoric stress tensor, respectively. The last source term $- \\rho_w L D_w(\\omega)$  permits to remove the water in temperate ice $D_w(\\omega)$ being a drainage function ((Greve, 1997) and (Aschwanden et al., 2012)).</p> <p>At the top ice surface, the enthalpy equation is constrained by the surface temperature (or equivalently the Enthalpy) provided by the climate forcing (Dirichlet condition). At the glacier bed, boundary conditions for the enthalpy equation are multiple ((Aschwanden and al, JOG, 2012), (Kleiner and al, TC, 2015) and (Wang and al, 2020).)</p> <ul> <li>$K_{c} \\frac{\\partial E}{ \\partial z} = Q_{\\rm geo} + Q_{\\rm fh}$ if $E_b&lt;E_{\\rm pmp}$ and $H_w = 0$, (cold base, dry) </li> <li>$ E_b = E_{\\rm pmp} $ if $E_b 0$, (cold base, wet) <li>$ E_b = E_{\\rm pmp} $ if $E_b \\ge E_{\\rm pmp}$ and $W_{till}&gt; 0$, zero temperate basal layer, (temperate base, cold ice)</li> <li>$ K_{t} \\frac{\\partial E}{ \\partial z} = 0$ if $E_b \\ge E_{\\rm pmp}$ and $W_{till} &gt; 0$, non-zero temperate basal layer, (temperate base, temp. ice)</li> <p>where $H_t$ is the height of the temperate basal layer, $Q_{\\rm geo}$ and $Q_{\\rm fh}$ are the geothermal heat flux, and the frictional heat flux, respectively. The latter is defined by  $$  Q_{\\rm fh} = \\tau_b \\cdot u_b = c | u_b |^{m+1}. $$</p> <p>As a matter of fact, the ice enthalpy (or equivalently temperature and water content) feedbacks the dynamical model in two ways. The Enthalpy directly impacts the sliding basal parametrization, while variations in temperature and water content cause ice softening or hardening. </p>"},{"location":"modules/enthalpy/#basal-melt","title":"Basal melt","text":"<p>When the temperature hits the pressure-melting point at the glacier bed (i.e. $E \\ge E_{\\rm pmp}$), the basal melt rate is calculated via the following equation: $$ \\begin{equation} m_b = \\frac{Q_{fr}+Q_{geo} - K_{t,c} \\frac{\\partial E}{ \\partial z} }{\\rho_i L}.  \\end{equation} $$ The basal melt rate is further adjusted positively to account for the drainage of the water content generated along the entire column.</p>"},{"location":"modules/enthalpy/#water-thickness","title":"Water thickness","text":"<p>The basal water thickness in the till $W_{till}$ is computed directly from the basal melt rate as follows: $$ \\begin{equation} \\frac{\\partial W_{till} }{ \\partial z} = \\frac{m_b}{\\rho_w} - C, \\end{equation} $$ where $C$ is a simple drainage parameter. The till is assumed to be saturated when it reaches the value $W_{till}^{max} = 2$ m, therefore, the till water thickness is bounded to this value. The effective thickness of water within the till $N_{till}$ is computed from the saturation ratio $s= W_{till} / W_{till}^{max}$ by the formula (Bueler and Pelt, GMD, 2015): $$ \\begin{equation} N_{till} = \\min \\left{ P_0, N_0 \\left( \\frac{\\delta P_0}{N_0} \\right)^s 10^{(e_0/C_c)(1-s)} \\right}, \\end{equation} $$ where $P_0$ is the ice overburden pressure and the remaining parameters are constant. </p>"},{"location":"modules/enthalpy/#sliding-parametrization","title":"Sliding parametrization","text":"<p>Last, the sliding coefficient $c$ is defined with the Mohr-Coulomb (Cuffey and Paterson, 2010) sliding law with the effective pressure in the till: $$ \\begin{align} c  = \\tau_c u_{th}^{-m} &amp; = N_{till} \\tan(\\phi) u_{th}^{-m}, \\ \\end{align} $$ where $\\phi$ is the till friction angle.</p>"},{"location":"modules/enthalpy/#ahrrenius-factor","title":"Ahrrenius factor","text":"<p>We use the Glen-Paterson-Budd-Lliboutry-Duval law, where</p> <p>$$A(T,\\omega)= A_c(T)(1+C \\omega) $$</p> <p>where $A_c(T)$ is given by the Paterson-Budd law:</p> <p>$$  A_c(T)= A \\exp{( \u2212Q / (R \\, T_{pa}) )} $$</p> <p>where $A$ and $Q$ have different values below and above a threshold temperature. </p> <p>$$ A = 3.985 \\times 10^{-13} \\, s^{-1} Pa^{-3}, \\textrm{ if } T &lt;263.15 K$$ $$ A = 1.916 \\times 10^3 \\, s^{-1} Pa^{-3}, \\textrm{else.}$$ and $$ Q =  60 kJ mol^{-1},  \\textrm{ if } T &lt;263.15 K$$ $$ Q = 139 kJ mol^{-1},  \\textrm{else.}$$</p> <p>These values are taken from (Paterson 1994).</p>"},{"location":"modules/enthalpy/#pressure-adujsuted-temperature","title":"Pressure-adujsuted temperature","text":"<p>Melting point temperature at pressure is adjusted for pressure as follows $$ T_{pmp} = T_{0} - \\beta \\rho g d, $$ where $d$ is the depth, $T_{0}=273.15$ is the melting temperate at standart pressure (unit [$K$]),  $\\beta = 7.9 \\; 10^{-8}$ is Clausius-Clapeyron constant (unit [$K Pa^{-1}$]). Therefore, one define the \"pressure-adjusted\" temperaure $T_{pa}$ as being the temperature with a shift such that its metling point temperature reference is always zero: $$ T_{pa} = T + \\beta \\rho g z. $$</p>"},{"location":"modules/enthalpy/#numerical-scheme","title":"Numerical scheme","text":"<p>To solve the Enthalpy equation numerically, one makes use of the same horizontal and vertical discretization as used for the ice flow. Treating the horizontal advection term explicitly using an upwind scheme, the Enthalpy equation with its boundary conditions can be solved column-wise as a one-dimensional advection-diffusion equation. This is achieved implicitly for both the vertical advection and the diffusion term, which are approximated by finite differences. For each column,  one solves a small tridiagonal using the Tridiagonal Matrix Algorithm (TDMA) aka Thomas Algorithm.</p> <p>Updating the Enthalpy at time $t^{n+1}$ requires to perform several sub-steps (in function ''update_enthalpy(params,state)''):</p> <ul> <li>compute the mean surface temperature $T^n_s$ to enforce upper surface Dirichlet Boundary condition,</li> <li>compute the vertical discretization with respect to the ice geometry $h^n$,</li> <li>compute the temperature $T_{pmp}$ and enthalpy $E_{pmp}$ at pressure meltinf point,</li> <li>compute the ice temperature field $T^n$ from the Enthalpy $E^n$,</li> <li>compute the Arrhenius factor $A(T^n)$ from temperature $T^n$,</li> <li>compute the 3D strain heat $\\phi^n$ from ice flow field ${\\bf u}^{n+1}$ and rrhenius factor $A(T^n)$,</li> <li>compute the 2D basal frictional heat $Q_{\\rm fh}^n$, from basal velocity field ${\\bf u}$ and sliding coefficient $c^n$,</li> <li>compute the $UPWIND^n$ term for the explicit treatement of the horizontal advection,</li> <li>compute the surface Enthalpy $E^n_s$ from the surface temperature $T^n_s$,</li> <li>compute the new enthalpy $E^{n+1}$ field solving one-dimension column-wise advection-diffusion equation, as well as the basal melt rate, this is the main updating step,</li> <li>compute the water thickness in the till $W^{n+1}$,</li> <li>compute the sliding parametrization $c^{n+1}$. </li> </ul>"},{"location":"modules/enthalpy/#numerical-stability-time-stepping","title":"Numerical stability -- time stepping","text":"<p>Here one updates the enthalpy as many times as the ice flow, we assume that the time step for the explicit advection is more restrictive than the implicit diffusion-advection problem.</p>"},{"location":"modules/enthalpy/#dependencies","title":"Dependencies","text":"<ul> <li>the enthalpy module builds upon the module iceflow</li> <li>one needs to have the vertical_iceflow module activated to provide the vertical velocitiy</li> <li>make sure to have params.dim_arrhenius = 3</li> <li>make sure to have params.new_friction_param = true</li> <li>make sure to ave enough retraining retrain_iceflow_emulator_freq: 1, possibly retrain_iceflow_emulator_nbit more than 1.</li> </ul>"},{"location":"modules/flow_dt_thk/","title":"Flow dt thk","text":""},{"location":"modules/flow_dt_thk/#igm-module-flow_dt_thk","title":"Flow dt thk","text":""},{"location":"modules/flow_dt_thk/#title","title":"IGM module flow_dt_thk","text":""},{"location":"modules/flow_dt_thk/#description","title":"Description:","text":"<p>This IGM module wraps up module iceflow, time and thk (check for each modules for the documentation).</p>"},{"location":"modules/gflex/","title":"gflex","text":""},{"location":"modules/gflex/#igm-isostasy_gfex-module","title":"gflex","text":""},{"location":"modules/gflex/#title","title":"IGM isostasy_gfex module","text":""},{"location":"modules/gflex/#description","title":"Description:","text":"<p>This IGM module permits to model the isostasy or upward motion of the  lithosphere when loaded with thick ice, it uses the  gflex python module writen by Andy Wickert.</p> <p>This function was implemented in IGM by J\u00fcrgen Mey.</p> <p>Parameters are the update frequency <code>gflex_update_freq</code> and the Elastic thickness [m] (Te) <code>gflex_default_Te</code>.</p> <p>This module only runs on CPU, which may be an issue for treating very large arrays. On the other hand, we do not expect a frequent update, therefore, this module should not be overall too consuming.</p>"},{"location":"modules/glerosion/","title":"glerosion","text":""},{"location":"modules/glerosion/#igm-module-glerosion","title":"glerosion","text":""},{"location":"modules/glerosion/#title","title":"IGM module <code>glerosion</code>","text":""},{"location":"modules/glerosion/#description","title":"Description:","text":"<p>This IGM module implements change in basal topography (due to glacial erosion). The bedrock is updated (with a frequency provided by parameter <code>glerosion_update_freq years</code>) assuming a power erosion law, i.e. the erosion rate is proportional (parameter <code>glerosion_cst</code>) to a power (parameter <code>glerosion_exp</code>) of the sliding velocity magnitude. </p> <p>By default, we use the parameters from</p> <p><code>Herman, F. et al., Erosion by an Alpine glacier. Science 350, 193-195, 2015.</code></p>"},{"location":"modules/iceflow/","title":"iceflow","text":""},{"location":"modules/iceflow/#igm-module-iceflow","title":"iceflow","text":""},{"location":"modules/iceflow/#title","title":"IGM module <code>iceflow</code>","text":""},{"location":"modules/iceflow/#description","title":"Description:","text":"<p>This IGM module models ice flow dynamics in 3D using a Convolutional Neural Network based on Physics Informed Neural Network as described in this paper. In more details, we train a CNN to minimise the energy associated with high-order ice flow equations within the time iterations of a glacier evolution model. As a result, our iflo_emulator is a computationally-efficient alternative to traditional solvers, it is capable to handle a variety of ice flow regimes and memorize previous solutions.</p> <p>Pre-trained emulators are provided by defaults (parameter <code>iflo_emulator</code>). However, a from scratch iflo_emulator can be requested with <code>iflo_emulator=\"\"</code>. The most important parameters are:</p> <ul> <li>physical parameters </li> </ul> <pre><code>\"iflo_init_slidingco\": 10000.0  # Init slid. coeff. ($Mpa^{-3} y^{-1} m$)\n\"iflo_init_arrhenius\": 78.0     # Init Arrhenius cts ($Mpa^{-3} y^{-1}$)\n\"iflo_exp_glen\": 3              # Glen's exponent\n\"iflo_exp_weertman\":  3         # Weertman's sliding law exponent\n</code></pre> <ul> <li>related to the vertical discretization:</li> </ul> <pre><code>\"iflo_Nz\": 10                 # number of vertical layers\n\"iflo_vert_spacing\": 4.0     # 1.0 for equal vertical spacing, 4.0 otherwise\n</code></pre> <ul> <li>learning rate and frequency of retraining:</li> </ul> <pre><code>\"iflo_retrain_emulator_lr\": 0.00002 \n\"iflo_retrain_emulator_freq\": 5     \n</code></pre> <p>While this module was targeted for deep learning emulation, it important parameters for solving are :</p> <p>is possible to use the solver (<code>iflo_type='solved'</code>) instead of the default iflo_emulator (<code>iflo_type='emulated'</code>), or use the two together (<code>iflo_type='diagnostic'</code>) to assess the emaultor against the solver. Most important parameters for solving are :</p> <pre><code>\"iflo_solve_step_size\": 0.00002 \n\"iflo_solve_nbitmax\": 5     \n</code></pre> <p>One may choose between 2D arrhenius factor by changing parameters between <code>iflo_dim_arrhenius=2</code> or <code>iflo_dim_arrhenius=3</code> -- le later is necessary for the enthalpy model.</p> <p>When treating ery large arrays, retraining must be done sequentially patch-wise for memory reason. The size of the pathc is controlled by parameter <code>iflo_multiple_window_size=750</code>.</p>"},{"location":"modules/iceflow/#reference","title":"Reference","text":"<pre><code>@article{jouvet2023ice,\n  title={Ice flow model emulator based on physics-informed deep learning},\n  author={Jouvet, Guillaume and Cordonnier, Guillaume},\n  year={2023},\n  publisher={EarthArXiv}\n}\n</code></pre>"},{"location":"modules/iceflow_v1/","title":"Iceflow v1","text":""},{"location":"modules/iceflow_v1/#igm-module-ice_flow_v1","title":"Iceflow v1","text":""},{"location":"modules/iceflow_v1/#title","title":"IGM module <code>ice_flow_v1</code>","text":""},{"location":"modules/iceflow_v1/#description","title":"Description:","text":"<p>This IGM module models ice flow using a Convolutional Neural Network following the former online training from external data.</p> <p>You may find trained and ready-to-use ice flow emulators in the folder <code>emulators/T_M_I_Y_V/R/</code>, where 'T_M_I_Y_V' defines the iflo_emulator, and R defines the spatial resolution. Make sure that the resolution of the picked iflo_emulator is available in the database. Results produced with IGM will strongly rely on the chosen iflo_emulator. Make sure that you use the iflo_emulator within the hull of its training dataset (e.g., do not model an ice sheet with an iflo_emulator trained with mountain glaciers) to ensure reliability (or fidelity w.r.t to the instructor model) -- the iflo_emulator is probably much better at interpolating than at extrapolating. Information on the training dataset is provided in a dedicated README coming along with the iflo_emulator.</p> <p>At the time of writing, I recommend using f15_cfsflow_GJ_22_a, which takes ice thickness, top surface slopes, the sliding coefficient c ('slidingco'), and Arrhenuis factor A ('arrhenius'), and return basal, vertical-average and surface x- and y- velocity components.</p> <p>I have trained f15_cfsflow_GJ_22_a using a large dataset of modeled glaciers (based on a Stokes-based CfsFlow ice flow solver) and varying sliding coefficient c, and Arrhenius factor A into a 2D space.</p> <p>It takes as inputs (thk, usurf, arrhenuis, slidingco) and provides as output: (ubar,vbar, uvelsurf, vvelsurf, uvelbase, vvelbase)</p>"},{"location":"modules/include_icemask/","title":"include_icemask","text":""},{"location":"modules/include_icemask/#igm-module-include_icemask","title":"include_icemask","text":""},{"location":"modules/include_icemask/#title","title":"IGM module <code>include_icemask</code>","text":""},{"location":"modules/include_icemask/#description","title":"Description:","text":"<p>This IGM module loads a shapefile (ESRI shapefile) and creates an ice mask from it. The shapefile can be either the coordinates where there should be no glacier (default) or where there should be glaciers (<code>mask_invert</code> = True). </p> <p>Input: Shapefile (.shp) exported from any GIS program (e.g. QGIS). Output: state.icemask</p> <p>This module can be used with any igm setup that calculates the new glacier surface via the <code>state.smb</code> variable.     For example add to <code>smb_simple.py</code>:</p> <pre><code>    # if an icemask exists, then force negative smb\n    if hasattr(state, \"icemask\")\n        state.smb = tf.where((state.smb&lt;0)|(state.icemask&gt;0.5),state.smb,-10)\n</code></pre> <p>Add this module in the list of \"modules_preproc\" after loading the topography input.</p> <p>The input can be one or more polygon features. Sometimes it is easier to select the valley where the glacier should be (<code>mask_invert</code> = True) or draw polygons where the glacier should not be (e.g. side valleys with no further interest).</p> <p>IMPORTANT: Be aware of the coordinate system used in the nc file and the shapefile.</p> <p>Author: Andreas Henz, andreas.henz@geo.uzh.ch  (06.09.2023)</p>"},{"location":"modules/infersmb/","title":"Infersmb","text":""},{"location":"modules/infersmb/#igm-module-infersmb","title":"Infersmb","text":""},{"location":"modules/infersmb/#title","title":"IGM module <code>infersmb</code>","text":""},{"location":"modules/infersmb/#description","title":"Description:","text":"<p>This IGM module computes the smb from the oggm_clim and oggm_smb files over 20 yeras from 2000 to 2020 to match the period of the hugonnet dataset</p>"},{"location":"modules/load_ncdf/","title":"load_ncdf","text":""},{"location":"modules/load_ncdf/#igm-module-load_ncdf","title":"load_ncdf","text":""},{"location":"modules/load_ncdf/#title","title":"IGM module <code>load_ncdf</code>","text":""},{"location":"modules/load_ncdf/#description","title":"Description:","text":"<p>This IGM module loads spatial 2D raster data from a NetCDF file (parameter <code>lncd_input_file</code>, default: input.nc) and transform all existing 2D fields into tensorflow variables. It is expected here to import at least basal topography (variable <code>topg</code>). It also complete the data, e.g. the basal topography from ice thickness and surface topography. However, any other field present in NetCDF file will be passed as tensorflow variables, and will therefore be available in the code through <code>state.myvar</code> (e.g. variable <code>icemask</code> can be provided, and served to define an accumulation area -- this is usefull for modelling an individual glaciers, and prevent overflowing in neighbouring catchements). The module also contains the two functions for resampling (parameter <code>lncd_coarsen</code> should be increased to 2,3,4 ..., default 1 value means no coarsening) and cropping the data (parameter <code>lncd_crop</code> should be set to True, and the bounds must be definined as wished).</p> <p>It is possible to restart an IGM run by reading data in an nNetCDF file obtained as a previous IGM run. To that aim, one needs to provide the NETcdf output file as input to IGM. IGM will look for the data that corresponds to the starting time <code>params.time_start</code>, and then intialize it with this time.</p> <p>This module depends on <code>netCDF4</code>.</p>"},{"location":"modules/load_tif/","title":"load_tif","text":""},{"location":"modules/load_tif/#igm-module-load_tif","title":"load_tif","text":""},{"location":"modules/load_tif/#title","title":"IGM module load_tif","text":""},{"location":"modules/load_tif/#description","title":"Description:","text":"<p>This IGM module loads spatial 2D raster data from any tif file present in the working directory folder, and transform each of them into tensorflow variables, the name of the file becoming the name of the variable, e.g. the file topg.tif will yield variable topg, ect... It is expected here to import at least basal topography (variable <code>topg</code>). It also complete the data, e.g. the basal topography from ice thickness and surface topography. Note that all these variables will therefore be available in the code with <code>state.myvar</code> from myvar.tif (e.g. variable <code>icemask</code> can be provided, and served to define an accumulation area -- this is usefull for modelling an individual glaciers, and prevent overflowing in neighbouring catchements). The module also contains two functions for resampling (parameter <code>ltif_coarsen</code> should be increased to 2,3,4 ..., default 1 value means no coarsening) and cropping the data (parameter <code>ltif_crop</code> should be set to True, and the bounds must be definined as wished).</p> <p>This module depends on <code>rasterio</code>.</p>"},{"location":"modules/oggm_shop/","title":"oggm_shop","text":""},{"location":"modules/oggm_shop/#igm-module-oggm_shop","title":"oggm_shop","text":""},{"location":"modules/oggm_shop/#title","title":"IGM module oggm_shop","text":""},{"location":"modules/oggm_shop/#description","title":"Description:","text":"<p>This IGM module uses OGGM utilities and GlaThiDa dataset to prepare data  for the IGM model for a specific glacier given the RGI ID (parameter <code>oggm_RGI_ID</code>), check at GLIMS VIeWER to find the RGI ID of your glacier (only for RGI 6.0 - if using RGI 7.0, please download the RGI shapefiles and use the enquire function in your GIS software to find the right ID - by default, IGM looks at RGI 7.0C here. but modifying line 304 of the module to '70G' instead of '70C' will give you that version instead. This may be made a parameter in the future once the RGI 7.0 release and associated OGGM data are all finalised). By default, data are already processed (parameter <code>oggm_preprocess</code> is True), with spatial resolution of 100 m and an oggm_border size of 30 m. For custom spatial resolution and size of 'oggm_border' to keep a safe distance to the glacier margin, one need to set <code>oggm_preprocess</code> parameter to False, and set <code>oggm_dx</code> and <code>oggm_border</code> parameter as desired. </p> <p>The module directly provides IGM with all 2D gridded variables (as tensorflow object), and are accessible in the code with e.g. <code>state.thk</code>. By default a copy of all the data are stored in a NetCDF file <code>input_saved.nc</code> so that this file can be readed directly in a second run with module <code>load_ncdf</code> instead of re-downloading the data with <code>oggm_shop</code> again. The module provides all data variables necessary to run IGM for a forward glacier evolution run (assuming we provide basal topography <code>topg</code> and ice thickness <code>thk</code>), or a preliminary data assimilation/ inverse modelling with the <code>optimize</code> module further data (typically <code>icemaskobs</code>, <code>thkinit</code>, <code>uvelsurf</code>, <code>vvelsurf</code>, <code>thkobs</code>, <code>usurfobs</code>).</p> <p>Data are currently based on COPERNICUS DEM 90 for the top surface DEM, the surface ice velocity from (Millan, 2022), the ice thickness from (Millan, 2022) or (farinotti2019) (the user can choose with parameter <code>oggm_thk_source</code> between <code>millan_ice_thickness</code> or <code>consensus_ice_thickness</code> dataset). </p> <p>When activating <code>oggm_include_glathida</code> to True, ice thickness profiles are downloaded from the GlaThiDa depo and are rasterized with name <code>thkobs</code> (pixels without data are set to NaN values.) if using RGI 6.0. With RGI 7.0, the GlaThiDa data are downloaded for the specific glacier (defined by the RGI ID) from the OGGM server and are found as a text file in the download folder created by this module (glathida_data.csv), from where they are subsequently read in, rasterised, and NaNs added where there are no observations.</p> <p>The OGGM script was written by Fabien Maussion. The GlaThiDa script was written by Ethan Welty &amp; Guillaume Jouvet. RGI 7.0 modifications were written by Samuel Cook.</p> <p>The module depends (of course) on the <code>oggm</code> library. Unfortunately the module works on linux and Max, but not on windows (unless using WSL).</p>"},{"location":"modules/optimize/","title":"optimize","text":""},{"location":"modules/optimize/#igm-module-optimize","title":"optimize","text":""},{"location":"modules/optimize/#title","title":"IGM module <code>optimize</code>","text":""},{"location":"modules/optimize/#description","title":"Description:","text":"<p>A data assimilation module of IGM permits to seek optimal ice thickness, top ice surface, and ice flow parametrization, that best explains observational data such as surface ice speeds, ice thickness profiles, top ice surface while being consistent with the ice flow iflo_emulator used in forwrd modelling. This page explains how to use the data assimilation module as a preliminary step in IGM of a forward/prognostic model run with module <code>optimize</code>.</p> <p>Note that the optimization currently requires some experience, and some parameter tunning may be needed before getting a meanigfully results. Use it with care, and with a certain dose of parameter exploration. Do not hesitate to get in contact with us for chcecking the consistency of results.</p>"},{"location":"modules/optimize/#getting-the-data","title":"Getting the data","text":"<p>The first thing you need to do is to get as much data as possible. Data list includes:</p> <ul> <li>Observed surface ice velocities ${\\bf u}^{s,obs}$, e.g. from Millan and al. (2022).</li> <li>Surface top elevation $s^{obs}$, e.g. SRTM, ESA GLO-30, ...</li> <li>Ice thickness profiles $h_p^{obs}$, e.g. GlaThiDa</li> <li>Glacier outlines, and resulting mask, e.g. from the Randolph Glacier Inventory.</li> </ul> <p>Of course, you may not have all these data, which is fine. You work with a reduced amount of data, however, you will have make assumptions to reduce the number of variables to optimize (controls) to keep the optimization problem well-posed (i.e., with a unique solution).</p> <p>Thes data can be obtained using the IGM module <code>oggm_shop</code>, or loading these 2D gridded variables using module <code>load_ncdf</code> or <code>load_tif</code> using convention variable names but ending with <code>obs</code>. E.g. <code>usurfobs</code> (observed top surface elevation), <code>thkobs</code> (observed thickness profiles, use nan or novalue where no data is available), <code>icemaskobs</code> (this mask from RGI outline serve to enforce zero ice thickness outside the mask), <code>uvelsurfobs</code> and <code>vvelsurfobs</code> (x- and y- components of the horizontal surface ice velocity, use nan or novalue where no data is available), <code>thkinit</code> (this may be a formerly-inferred ice thickness field to initalize the inverse model, otherwise it would start from thk=0).</p> <p>Use the IGM <code>oggm_shop</code> to download all the data you need using OGGM and the GlaThiDa database.</p>"},{"location":"modules/optimize/#general-optimization-setting","title":"General optimization setting","text":"<p>The optimization problem consists of finding spatially varying fields ($h$, $c$, $s$) that minimize the cost function $$ \\mathcal{J}(h,c,s)=\\mathcal{C}^u+\\mathcal{C}^h+\\mathcal{C}^s+\\mathcal{C}^{d}+\\mathcal{R}^h+\\mathcal{R}^{c}+\\mathcal{P}^h, $$</p> <p>where $\\mathcal{C}^u$ is the misfit between modeled and observed surface ice velocities ($\\mathcal{F}$ is the output of the ice flow iflo_emulator/neural iflo_network): $$\\mathcal{C}^u=\\int_{\\Omega}\\frac{1}{2\\sigma_u^2}\\left|{\\bf u}^{s,obs}-\\mathcal{F}(h,\\frac{\\partial s}{\\partial x},\\frac{\\partial s}{\\partial y},c)\\right|^2,$$</p> <p>where $\\mathcal{C}^h$ is the misfit between modeled and observed ice thickness profiles: $$\\mathcal{C}^h=\\sum_{p=1,...,P} \\sum_{i=1,...,M_p}\\frac{1}{2 \\sigma_h^2}|h_p^{obs}(x^p_i, y^p_i)-h (x^p_i, y^p_i)|^2,$$</p> <p>where $\\mathcal{C}^s$ is the misfit between the modeled and observed top ice surface: $$\\mathcal{C}^s=\\int_{\\Omega}\\frac{1}{2 \\sigma_s^2}\\left|s-s^{obs}\\right|^2,$$</p> <p>where $\\mathcal{C}^{d}$ is a misfit term between the flux divergence and its polynomial  regression $d$ with respect to the ice surface elevation $s(x,y)$ to enforce smoothness with  dependence to $s$: $$\\mathcal{C}^{d}=\\int_{\\Omega}\\frac{1}{2 \\sigma_d^2}\\left|\\nabla \\cdot (h {\\bar{\\bf u}})-d \\right|^2,$$</p> <p>where $\\mathcal{R}^h$ is a regularization term to enforce anisotropic smoothness and convexity of $h$: $$\\mathcal{R}^h=\\alpha_h\\int_{h&gt;0}\\left(|\\nabla h \\cdot \\tilde{{\\bf u}}^{s,obs} |^2+\\beta|\\nabla h \\cdot (\\tilde{{\\bf u}}^{s,obs})^{\\perp} |^2-\\gamma h\\right),$$</p> <p>where $\\mathcal{R}^{c}$ is a regularization term to enforce smooth c: $$\\mathcal{R}^{c}=\\alpha_{\\tilde{A}}\\int_{\\Omega}|\\nabla c|^2,$$</p> <p>where $\\mathcal{P}^h$ is a penalty term to enforce nonnegative ice thickness, and zero thickness outside a given mask: $$\\mathcal{P}^h=10^{10} \\times \\left(\\int_{h&lt;0} h^2+\\int_{\\mathcal{M}^{\\rm ice-free}} h^2 \\right).$$</p> <p>Check at the reference paper given below for more explanation on the regularization terms.</p>"},{"location":"modules/optimize/#define-controls-and-cost-components","title":"Define controls and cost components","text":"<p>The above optimization problem is given in the most general case, however, you may select only some components according to your data as follows: </p> <ul> <li>the list of control variables you wish to optimize, e.g., </li> </ul> <pre><code>\"opti_control\": ['thk','slidingco','usurf'] # this is the most general case  \n\"opti_control\": ['thk','usurf'] # this will only optimize ice thk and top surf \n\"opti_control\": ['thk'] # this will only optimize ice thickness \n</code></pre> <ul> <li>the list of cost components you wish to minimize, e.g.</li> </ul> <pre><code>\"opti_cost\": ['velsurf','thk','usurf','divfluxfcz','icemask']  # most general case  \n\"opti_cost\": ['velsurf','icemask'] # Here only fit surface velocity and ice mask.\n</code></pre> <p>I recomend to start with a simple optimization, starting with one single control (typically <code>thk</code>), and a few target/cost component (typically <code>velsurf</code> and <code>icemask</code>), and then to increase the complexity of the optimization (adding controls and cost components) once the the most simple give meaningfull results. Make sure to keep a balance between controls and constraints to ensure the problem to keep the problem well-posed, and prevents against multiple solutions.</p>"},{"location":"modules/optimize/#exploring-parameters","title":"Exploring parameters","text":"<p>There are parameters that may need to tune for each application.</p> <p>First, you may change your expected confidence levels (i.e. tolerance to fit the data) $\\sigma^u, \\sigma^h, \\sigma^s, \\sigma^d$ to fit surface ice velocity, ice thickness, surface top elevation, or divergence of the flux as follows:</p> <pre><code>\"opti_velsurfobs_std\": 5 # unit m/y\n\"opti_thkobs_std\" : 5 # unit m\n\"opti_usurfobs_std\" : 5 # unit m\n\"opti_divfluxobs_std\": 1 # unit m/y\n</code></pre> <p>Second, you may change regularization parameters such as i) $\\alpha^h, \\alpha^A$, which control the regularization weights for the ice thickness and strflowctrl (increasing $\\alpha^h, \\alpha^A$ will make thse fields spatially smoother), or ii) parameters beta and gamma involved for regularizing the ice thickness h. Taking beta=1 occurs to enforce isotropic smoothing, reducing beta will make the smoothing more and more anisotropic to enforce further smoothing along ice flow directions than accross directions (as expected for the topography of a glacier bedrock, which was eroded over long times). Setting parameter gamma to a small value may be usefull to add a bit of convexity in the system. This may help when initializing the inverse modelled with zero thickness, or to treat margin regions with no data available. These parameters may be changed as follows:</p> <pre><code>\"opti_regu_param_thk\": 10.0            # weight for the regul. of thk\n\"opti_regu_param_slidingco\": 1.0     # weight for the regul. of slidingco\n\"opti_smooth_anisotropy_factor\": 0.2\n\"opti_convexity_weight\":  0.002\n</code></pre> <p>Lastly, there are a couple of other parameters we may be interest to change e.g.</p> <pre><code>\"opti_nbitmax\": 1000   # Number of it. for the optimization\n\"opti_step_size\": 0.001  # step size in the optimization iterative algorithm\n\"opti_init_zero_thk\": True   # Force init zero ice thk (otherwise take thkinit)\n</code></pre>"},{"location":"modules/optimize/#monitoring-the-optimization","title":"Monitoring the optimization","text":"<p>You may monitor the data assimilation during the inverse modelling in several ways:</p> <ul> <li>Check that the components of the costs decrease over time, the value of cost are printed during the optimization, and a graph is produced at the end.</li> <li>Set up parameter <code>plot_result</code> to  True and <code>plt2d_live</code> to True to monitor in live time the evolution of the field your are optimizing such as the ice thickness, the surface ice speeds, ect ... You may also check (hopefully decreasing) STD given in the figure.</li> <li>You may do the same monitoring after the run looking at optimize.nc reuesting this file to be written.</li> <li>If you asked divfluxfcz to be in the parameter list <code>opti_cost</code>, you should check what look like the divergence of the flux (divflux).</li> </ul>"},{"location":"modules/optimize/#references","title":"References","text":"<pre><code>@article{jouvet2023inversion,\n  author =        {Jouvet, Guillaume},\n  journal =       {Journal of Glaciology},\n  number =        {273},\n  pages =         {13--26},\n  publisher =     {Cambridge University Press},\n  title =         {{Inversion of a Stokes glacier flow model emulated by deep learning}},\n  volume =        {69},\n  year =          {2023},\n  doi =           {10.1017/jog.2022.41},\n}\n\n@article{jouvet2023ice,\n  title={Ice flow model emulator based on physics-informed deep learning},\n  author={Jouvet, Guillaume and Cordonnier, Guillaume},\n  year={2023},\n  publisher={EarthArXiv}\n}\n</code></pre>"},{"location":"modules/optimize_v1/","title":"Optimize v1","text":""},{"location":"modules/optimize_v1/#igm-module-optimize_v1","title":"Optimize v1","text":""},{"location":"modules/optimize_v1/#title","title":"IGM module optimize_v1","text":""},{"location":"modules/optimize_v1/#description","title":"Description:","text":"<p>A data assimilation module of IGM permits to seek optimal ice thickness, top ice surface, and ice flow parametrization (red variables in the following figure), that best explains observational data such as surface ice speeds, ice thickness profiles, top ice surface (blue variables in the following figure) while being consistent with the ice flow iflo_emulator used in forwrd modelling. This page explains how to use the data assimilation module as a preliminary step in IGM of a forward/prognostic model run. I recommend to read the paper reference given below before to proceed further. </p>"},{"location":"modules/optimize_v1/#getting-the-data","title":"Getting the data","text":"<p>The first thing you need to do is to get as much data as possible, this includes:</p> <ul> <li>Observed surface ice velocities ${\\bf u}^{s,obs}$, e.g. from Millan and al. (2022).</li> <li>Surface top elevation $s^{obs}$, e.g. SRTM, ESA GLO-30, ...</li> <li>Ice thickness profiles $h_p^{obs}$, e.g. GlaThiDa</li> <li>Glacier outlines, and resulting mask, e.g. from the Randolph Glacier Inventory.</li> </ul> <p>Of course, you may not have all these data, which is fine. You work with a reduced amount of data, however, you will have make assumptions to reduce the number of variables to optimize (controls) to keep the optimization problem well-posed (i.e., with a unique solution).</p> <p>All the data need to be assemblied in 2D raster grid in an netcdf file (called by default observation.nc) using convention variable names but ending with 'obs'. E.g. observation.nc contains fields 'usurfobs' (observed top surface elevation), 'thkobs' (observed thickness profiles, use nan or novalue where no data is available), 'icemaskobs' (this mask from RGI outline serve to enforce zero ice thickness outside the mask), 'uvelsurfobs' and 'vvelsurfobs' (x- and y- components of the horizontal surface ice velocity, use nan or novalue where no data is available), 'thkinit' (this may be a formerly-inferred ice thickness field to initalize the inverse model, otherwise it would start from thk=0).</p> <p>Use the IGM 'preprare_data' to download all the data you need using OGGM and the GlaThiDa database</p>"},{"location":"modules/optimize_v1/#asumption-on-the-ice-flow-control","title":"Asumption on the ice flow control","text":"<p>Optimizing for both Arrhenius factor (A) and sliding coefficient (c) would lead to multiple solutions as several combinations of the two may explain the observed ice flow similarly. To deal with this issue, we introduce a single control of the ice flow strenght (named as 'strflowctrl' in IGM) $\\tilde{A}$ = A + lambda c, where A is the Arrhenius factor that controls the ice shearing from cold-ice case (low A) to temperate ice case (A=78), c is a sliding coefficient that controls the strength of basal motion from no sliding (c=0) to high sliding (high c) and lambda=1 is a given parameter. </p>"},{"location":"modules/optimize_v1/#general-optimization-setting","title":"General optimization setting","text":"<p>The optimization problem consists of finding spatially varying fields ($h$, $\\tilde{A}$, $s$) that minimize the cost function $$ \\mathcal{J}(h,\\tilde{A},s) = \\mathcal{C}^u + \\mathcal{C}^h + \\mathcal{C}^s + \\mathcal{C}^{d} + \\mathcal{R}^h +  \\mathcal{R}^{\\tilde{A}} +  \\mathcal{P}^h, $$</p> <p>where $\\mathcal{C}^u$ is the misfit between modeled and observed surface ice velocities ($\\mathcal{F}$ is the output of the ice flow iflo_emulator/neural iflo_network): $$ \\mathcal{C}^u = \\int_{\\Omega} \\frac{1}{2 \\sigma_u^2} \\left| {\\bf u}^{s,obs} - \\mathcal{F}( h, \\frac{\\partial s}{\\partial x}, \\frac{\\partial s}{\\partial y}, \\tilde{A})  \\right|^2,  $$</p> <p>where $\\mathcal{C}^h$ is the misfit between modeled and observed ice thickness profiles: $$ \\mathcal{C}^h = \\sum_{p=1,...,P} \\sum_{i=1,...,M_p} \\frac{1}{2 \\sigma_h^2}  | h_p^{obs}  (x^p_i, y^p_i) - h (x^p_i, y^p_i) |^2, $$</p> <p>where $\\mathcal{C}^s$ is the misfit between the modeled and observed top ice surface: $$ \\mathcal{C}^s = \\int_{\\Omega} \\frac{1}{2 \\sigma_s^2}  \\left| s - s^{obs}  \\right|^2,$$</p> <p>where $\\mathcal{C}^{d}$ is a misfit term between the flux divergence and its polynomial  regression $d$ with respect to the ice surface elevation $s(x,y)$ to enforce smoothness with  dependence to $s$: $$ \\mathcal{C}^{d} = \\int_{\\Omega} \\frac{1}{2 \\sigma_d^2} \\left| \\nabla \\cdot (h {\\bar{\\bf u}}) - d  \\right|^2, $$</p> <p>where $\\mathcal{R}^h$ is a regularization term to enforce anisotropic smoothness and convexity of $h$: $$ \\mathcal{R}^h = \\alpha_h \\int_{h&gt;0} \\left(  | \\nabla h \\cdot \\tilde{{\\bf u}}^{s,obs} |^2 + \\beta  | \\nabla h \\cdot (\\tilde{{\\bf u}}^{s,obs})^{\\perp} |^2   -  \\gamma h  \\right),  $$</p> <p>where $\\mathcal{R}^{\\tilde{A}}$ is a regularization term to enforce smooth A: $$ \\mathcal{R}^{\\tilde{A}} = \\alpha_{\\tilde{A}} \\int_{\\Omega} | \\nabla  \\tilde{A}  |^2, $$</p> <p>where $\\mathcal{P}^h$ is a penalty term to enforce nonnegative ice thickness, and zero thickness outside a given mask: $$ \\mathcal{P}^h  = 10^{10} \\times \\left( \\int_{h&lt;0} h^2 + \\int_{\\mathcal{M}^{\\rm ice-free}} h^2 \\right).$$</p> <p>Check at the reference paper given below for more explanation on the regularization terms.</p>"},{"location":"modules/optimize_v1/#define-controls-and-cost-components","title":"Define controls and cost components","text":"<p>The above optimization problem is given in the most general case, however, you may select only some components according to your data as follows: </p> <ul> <li>the list of control variables you wish to optimize, e.g.</li> </ul> <pre><code>params.opti_control=['thk','strflowctrl','usurf'] # this is the most general case  \nparams.opti_control=['thk','usurf'] # this will only optimize ice thickness and top surface elevation\nparams.opti_control=['thk'] # this will only optimize ice thickness \n</code></pre> <ul> <li>the list of cost components you wish to minimize, e.g.</li> </ul> <pre><code>glacier.config.opti_cost=['velsurf','thk','usurf','divfluxfcz','icemask']  # this is the most general case  \nglacier.config.opti_cost=['velsurf','icemask']  # In this case, you only fit surface velocity and ice mask.\n</code></pre> <p>Make sure you have a balance between controls and constraints to ensure the problem to have a unique solution.</p>"},{"location":"modules/optimize_v1/#exploring-parameters","title":"Exploring parameters","text":"<p>There are parameters that may need to tune for each application.</p> <p>First, you may change your expected confidence levels (i.e. tolerance to fit the data) $\\sigma^u, \\sigma^h, \\sigma^s, \\sigma^d$ to fit surface ice velocity, ice thickness, surface top elevation, or divergence of the flux as follows:</p> <pre><code>params.opti_velsurfobs_std = 5 # unit m/y\nparams.opti_thkobs_std     = 5 # unit m\nparams.opti_usurfobs_std   = 5 # unit m\nparams.opti_divfluxobs_std = 1 # unit m/y\n</code></pre> <p>Second, you may change regularization parameters such as i) $\\alpha^h, \\alpha^A$, which control the regularization weights for the ice thickness and strflowctrl (increasing $\\alpha^h, \\alpha^A$ will make thse fields spatially smoother), or ii) parameters beta and gamma involved for regularizing the ice thickness h. Taking beta=1 occurs to enforce isotropic smoothing, reducing beta will make the smoothing more and more anisotropic to enforce further smoothing along ice flow directions than accross directions (as expected for the topography of a glacier bedrock, which was eroded over long times). Setting parameter gamma to a small value may be usefull to add a bit of convexity in the system. This may help when initializing the inverse modelled with zero thickness, or to treat margin regions with no data available. These parameters may be changed as follows:</p> <pre><code>params.opti_regu_param_thk = 10.0            # weight for the regul. of thk\nparams.opti_regu_param_strflowctrl = 1.0     # weight for the regul. of strflowctrl\nparams.opti_smooth_anisotropy_factor = 0.2\nparams.opti_convexity_weight = 0.002\n</code></pre> <p>Lastly, there are a couple of other parameters we may be interest to change e.g.</p> <pre><code>params.opti_nbitmax       = 1000   # Number of it. for the optimization\nparams.opti_step_size     = 0.001  # step size in the optimization iterative algorithm\nparams.opti_init_zero_thk = True   # Force inializing with zero ice thickness (otherwise take thkinit)\n</code></pre>"},{"location":"modules/optimize_v1/#monitoring-the-optimization","title":"Monitoring the optimization","text":"<p>You may monitor the data assimilation during the inverse modelling in several ways:</p> <ul> <li>Check that the components of the costs decrease over time, the value of cost are printed during the optimization, and a graph is produced at the end.</li> <li>Set up glacier.config.plot_result = True and glacier.config.plt2d_live = True to monitor in live time the evolution of the field your are optimizing such as the ice thickness, the surface ice speeds, ect ... You may also check (hopefully decreasing) STD given in the figure.</li> <li>You may do the same monitoring after the run looking at optimize.nc</li> <li>If you asked divfluxfcz to be in glacier.config.opti_cost, you should check what look like the divergence of the fluc (divflux)</li> </ul>"},{"location":"modules/optimize_v1/#reference","title":"Reference","text":"<pre><code>@article{IGM-inv,\n  author       = \"Jouvet, G.\",\n  title        = \"Inversion of a Stokes ice flow model emulated by deep learning\",\n  DOI          = \"10.1017/jog.2022.41\",\n  journal      = \"Journal of Glaciology\",\n  year         = \"2022\",\n  pages        = \"1--14\",\n  publisher    = \"Cambridge University Press\"\n}\n</code></pre>"},{"location":"modules/particles/","title":"particles","text":""},{"location":"modules/particles/#igm-module-particles","title":"particles","text":""},{"location":"modules/particles/#title","title":"IGM module <code>particles</code>","text":""},{"location":"modules/particles/#description","title":"Description:","text":"<p>This IGM module implements a particle tracking routine, which computes trajectory of virtual particles advected by the ice flow. The specificity is that it runs in live time during the forward mdodel run and a large number of particles can be computed tanks to the parrallel implementation with TensorFlow. The routine includes particle seeding (by default in the accumulation area at regular intervals, but this can be customized), and tracking (advection by the velocity field in 3D). There is currently no strategy for removing particles, therefore, there is risk of overloading the memory when using this routine as it is for long time and/or with intense seeding.</p> <p>There are currently 2 implementations (switch with parameter <code>part_tracking_method</code>:</p> <ul> <li> <p><code>'simple'</code>: Horizontal and vertical directions are treated differently: i) In the horizontal plan, particles are advected with the horizontal velocity field (interpolated bi-linearly) ii) In the vertical direction, particles are tracked along the ice column scaled between 0 and 1 (0 at the bed, 1 at the top surface) with the  relative position along the ice column. Particles are always initialized at 1 relative height (assumed to be on the surface). The evolution of the particle within the ice column through time is computed according to the surface mass balance: the particle deepens when the surface mass balance is positive (the relative height decreases), and re-emerge when the surface mass balance is negative (the relative height increases).</p> </li> <li> <p><code>'3d'</code>: requires to activate module <code>vert_flow</code>, which computes the vertical velocity by integrating the divergence of the horizontal velocity. This permits in turn to perform 3D particle tracking.</p> </li> </ul> <p>For now, <code>part_tracking_method</code> is by default set to  <code>'simple'</code>, as the  <code>'3d'</code> method (and the dependence <code>vert_flow</code>) needs to further tested.</p> <p>Note that you my adapt the seeding to your need. You may keep the default seeding in the accumulation area setting the seeding frequency with <code>part_frequency_seeding</code> parameter and the seeding density <code>part_density_seeding</code> parameter. Alternatively, you may define your own seeding strategy (e.g. seeding close to rock walls/nunataks). To do so, you may redefine the function <code>seeding_particles()</code> in a file <code>particles.py</code> provided in the working directory (check the example aletsch-1880-2100). When excuted, <code>igm_run</code> will overide the original function <code>seeding_particles()</code> with the new user-defined one.</p> <p>The module needs horizontal velocities (state.U), as well as vertical speeds (state.W) that ice computed with the vert_flow module when <code>part_tracking_method</code> is set to <code>3d</code>. </p> <p>Note: in the code, positions of particles are recorded within a vector of lenght te number of traked particels state.xpos, state.ypos, state.zpos. Variable state.rhpos provide the relative height within the ice column (1 at the surface, 0 at the bed). At each time step, the weight of surface debris contains in each cell the 2D  horizontal grid is computed, and stored in variable state.weight_particles.</p>"},{"location":"modules/particles_v1/","title":"Particles v1","text":""},{"location":"modules/particles_v1/#igm-module-particle_v1","title":"Particles v1","text":""},{"location":"modules/particles_v1/#title","title":"IGM module <code>particle_v1</code>","text":""},{"location":"modules/particles_v1/#description","title":"Description:","text":"<p>This IGM module implments the former particle tracking routine associated with iceflow_v1 (check at the doc of particles).</p>"},{"location":"modules/plot2d/","title":"plot2d","text":""},{"location":"modules/plot2d/#igm-module-plot2d","title":"plot2d","text":""},{"location":"modules/plot2d/#title","title":"IGM module <code>plot2d</code>","text":""},{"location":"modules/plot2d/#description","title":"Description:","text":"<p>This IGM module produces 2D plan-view plots of variable defined by parameter <code>plt2d_var</code> (e.g. <code>plt2d_var</code> can be set to <code>thk</code>, or <code>ubar</code>, ...). The saving frequency is given by parameter <code>time_save</code> defined in module <code>time</code>.  The scale range of the colobar is controlled by parameter <code>plt2d_varmax</code>.</p> <p>By default, the plots are saved as png files in the working directory. However, one may display the plot \"in live\" by setting <code>plt2d_live</code> to True. Note that if you use the spyder python editor, you need to turn <code>plt2d_editor</code> to 'sp'.</p> <p>If the <code>particles</code> module is activated, one may plot particles on the top setting <code>plt2d_particles</code> to True, or remove them form the plot seeting it to False.</p>"},{"location":"modules/pretraining/","title":"pretraining","text":""},{"location":"modules/pretraining/#igm-module-pretaining","title":"pretraining","text":""},{"location":"modules/pretraining/#title","title":"IGM module <code>pretaining</code>","text":""},{"location":"modules/pretraining/#description","title":"Description:","text":"<p>This module performs a pretraining of the ice flow iflo_emulator on a glacier catalogue to improve the performance of the emaulator when used in glacier forward run. The pretraining can be relatively computationally demanding task (a couple of hours). This module should be called alone independently of any other igm module. Here is an example of paramter file:</p> <pre><code>{\n  \"modules_preproc\": [\"pretraining\"],\n  \"modules_process\": [],\n  \"modules_postproc\": [],\n  \"data_dir\": \"surflib3d_shape_100\",\n  \"iflo_solve_nbitmax\": 2000,\n  \"iflo_solve_stop_if_no_decrease\": false,\n  \"iflo_retrain_emulator_lr\": 0.0001,\n  \"iflo_dim_arrhenius\": 3,\n  \"soft_begining\": 500\n}\n</code></pre> <p>To run it, one first needs to have available a glacier catalogue.  I provide here  a dataset of a glacier catalogue (mountain glaciers) I have mostly used for pretraining IGM emaulators.</p> <p>Once downloaded (or self generated), the folder  \"surflib3d_shape_100\" can be re-organized into a subfolder \"train\" and a subfolder \"test\"  as follows:</p> <pre><code>\u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 NZ000_A78_C0\n\u2514\u2500\u2500 train\n    \u251c\u2500\u2500 ALP02_A78_C0\n    \u251c\u2500\u2500 ALP03_A78_C0\n    \u251c\u2500\u2500 ALP04_A78_C0\n    \u251c\u2500\u2500 ALP05_A78_C0\n    \u251c\u2500\u2500 ALP06_A78_C0\n    \u251c\u2500\u2500 ALP11_A78_C0\n    \u251c\u2500\u2500 ALP17_A78_C0\n</code></pre> <p>The path (or name of the data folder) must be pass in parameter <code>data_dir</code>.</p>"},{"location":"modules/print_comp/","title":"print_comp","text":""},{"location":"modules/print_comp/#igm-module-print_comp","title":"print_comp","text":""},{"location":"modules/print_comp/#title","title":"IGM module <code>print_comp</code>","text":""},{"location":"modules/print_comp/#description","title":"Description:","text":"<p>This module reports the computational times taken by any IGM modules at the end of the model run directly in the terminal output, as well as in a file (\"computational-statistics.txt\"). It also produces a camember-like plot ( \"computational-pie.png\") displaying the relative importance of each module, computationally-wise. </p> <p>Note: These numbers must be interepreted with care: Leaks of computational times from one to another module are sometime observed (likely) due to asynchronous GPU calculations.</p>"},{"location":"modules/print_info/","title":"print_info","text":""},{"location":"modules/print_info/#igm-module-print_info","title":"print_info","text":""},{"location":"modules/print_info/#title","title":"IGM module <code>print_info</code>","text":""},{"location":"modules/print_info/#description","title":"Description:","text":"<p>This IGM modules prints in the terminal basic live-time modelling informations such that the iteration number, time, time step, and ice volume (km^3).</p>"},{"location":"modules/read_output/","title":"Read output","text":""},{"location":"modules/read_output/#igm-read_output","title":"Read output","text":""},{"location":"modules/read_output/#title","title":"IGM read_output","text":""},{"location":"modules/read_output/#description","title":"Description:","text":"<p>This IGM module permits to read an output NetCDF file produced previously and to run igm as if these quantities  were shortly computed, this is mainly usefull for testing postprocessing module independently.</p>"},{"location":"modules/rockflow/","title":"rockflow","text":""},{"location":"modules/rockflow/#igm-module-rockflow","title":"rockflow","text":""},{"location":"modules/rockflow/#title","title":"IGM module <code>rockflow</code>","text":""},{"location":"modules/rockflow/#description","title":"Description:","text":"<p>This module extends the ice flow outside the glaciated area, by giving a constant speed and along-slope flow direction. This modules serves to track rock-like particles (with module <code>particles</code>) everywhere in ice-free and ice-filled areas, particles being either advected at constant steep (controlled by parameter <code>rock_flow_speed</code>) following the stepest gradient of the ice-free terrain in 2D, or by ice flow in 3D.</p>"},{"location":"modules/smb_oggm/","title":"smb_oggm","text":""},{"location":"modules/smb_oggm/#igm-smb_oggm-module","title":"smb_oggm","text":""},{"location":"modules/smb_oggm/#title","title":"IGM smb_oggm module","text":""},{"location":"modules/smb_oggm/#description","title":"Description:","text":"<p>Module <code>smb_oggm</code> implements the monthly temperature index model calibrated on geodetic MB data (Hugonnet, 2021) by OGGM. The yearly surface mass balance  is computed with  $$ SMB = \\frac{\\rho_w}{\\rho_i}  \\sum_{i=1}^{12} \\left( P_i^{sol} - d_f \\max { T_i - T_{melt}, 0 } \\right), $$ where $P_i^{sol}$ is the is the monthly solid precipitation, $T_i$ is the monthly temperature and $T_{melt}$ is the air temperature above which ice melt is assumed to occur (parameter <code>temp_melt</code>), $d_f$ is the melt factor (parameter <code>melt_f</code>), and $\\frac{\\rho_w}{\\rho_i} $ is the ratio of water to ice density. Solid precipitation $P_i^{sol}$ is computed out of precipitation and temperature such that it equals precipitation when the temperature is lower than a certain threshold (parameter <code>temp_all_solid</code>), zero above another threshold (parameter <code>temp_all_liq</code>), with a linear transition between the two. Module <code>oggm_shop</code> provides all calibrated parameters.</p>"},{"location":"modules/smb_simple/","title":"Smb simple","text":""},{"location":"modules/smb_simple/#igm-module-smb_simple","title":"Smb simple","text":""},{"location":"modules/smb_simple/#title","title":"IGM module <code>smb_simple</code>","text":""},{"location":"modules/smb_simple/#description","title":"Description:","text":"<p>This IGM modules models a simple surface mass balance model parametrized by time-evolving ELA $z_{ELA}$, ablation $\\beta_{abl}$ and accumulation $\\beta_{acc}$ gradients, and max accumulation $m_{acc}$ parameters:</p> <p>$$SMB(z)=min(\\beta_{acc} (z-z_{ELA}),m_{acc})\\quad\\textrm{if}\\;z&gt;z_{ELA},$$ $$SMB(z)=\\beta_{abl} (z-z_{ELA})\\quad\\textrm{else}.$$</p> <p>These parameters may be given in file (file name given in <code>smb_simple_file</code> parameter), which look like this</p> <pre><code>time   gradabl  gradacc    ela   accmax\n1900     0.009    0.005   2800      2.0\n2000     0.009    0.005   2900      2.0\n2100     0.009    0.005   3300      2.0\n</code></pre> <p>or directly as parameter in the cconfig <code>params.json</code> file:</p> <pre><code>\"smb_simple_array\": [ \n                     [\"time\", \"gradabl\", \"gradacc\", \"ela\", \"accmax\"],\n                     [ 1900,      0.009,     0.005,  2800,      2.0],\n                     [ 2000,      0.009,     0.005,  2900,      2.0],\n                     [ 2100,      0.009,     0.005,  3300,      2.0]\n                    ],\n</code></pre> <p>If parameter <code>smb_simple_array</code> is set to empty list <code>[]</code>, then it will read the file <code>smb_simple_file</code>, otherwise it read the array <code>smb_simple_array</code> (which is here in fact a list of list).</p> <p>The module will compute surface mass balance at a frequency given by parameter <code>smb_simple_update_freq</code> (default is 1 year), and interpolate linearly the 4 parameters in time.</p> <p>If one has provided in input an \"icemask\" field, then this module will compute negative surface mass balance (-10 m/y) in place where posstive surface mass balance outside the mask were originally computed. The goal here is to prevent against overflowing in neibourghing catchements.</p>"},{"location":"modules/thk/","title":"thk","text":""},{"location":"modules/thk/#igm-module-thk","title":"thk","text":""},{"location":"modules/thk/#title","title":"IGM module <code>thk</code>","text":""},{"location":"modules/thk/#description","title":"Description:","text":"<p>This IGM module solves the mass conservation of ice to update the thickness from ice flow (computed from module <code>iceflow</code>) and surface mass balance (given any module that update <code>smb</code>). The mass conservation equation is solved using an explicit first-order upwind finite-volume scheme on the 2D working grid. With this scheme mass of ice is allowed to move from cell to cell (where thickness and velocities are defined) from edge-defined fluxes (inferred from depth-averaged velocities, and ice thickness in upwind direction). The resulting scheme is mass conservative and parallelizable (because fully explicit). However, it is subject to a CFL condition. This means that the time step (defined in module <code>time</code>) is controlled by parameter parameter <code>time_cfl</code>, which is the maximum number of cells crossed in one iteration (this parameter cannot exceed one), see the documentation of module <code>time</code>. A bit more details on the scheme are given in the following paper.</p> <pre><code>@article{jouvet2022deep,\n  author =        {Jouvet, Guillaume and Cordonnier, Guillaume and\n                   Kim, Byungsoo and L{\\\"u}thi, Martin and\n                   Vieli, Andreas and Aschwanden, Andy},\n  journal =       {Journal of Glaciology},\n  number =        {270},\n  pages =         {651--664},\n  publisher =     {Cambridge University Press},\n  title =         {Deep learning speeds up ice flow modelling by several\n                   orders of magnitude},\n  volume =        {68},\n  year =          {2022},\n  doi =           {10.1017/jog.2021.120},\n}\n</code></pre>"},{"location":"modules/time/","title":"time","text":""},{"location":"modules/time/#igm-module-time","title":"time","text":""},{"location":"modules/time/#title","title":"IGM module <code>time</code>","text":""},{"location":"modules/time/#description","title":"Description:","text":"<p>This IGM modules computes time step such that i) it satisfy the CFL condition (controlled by parameter <code>clf</code>) ii) it is lower than a given maximum time step (controlled by parameter <code>time_step_max</code>) iii) it hits exactly given saving times (controlled by parameter <code>time_save</code>). The module additionally updates the time $t$ in addition to the time step.</p> <p>Indeed, for stability reasons of the transport scheme for the ice thickness evolution, the time step must respect a CFL condition, controlled by parameter <code>time_cfl</code>, which is the maximum number of cells crossed in one iteration (this parameter cannot exceed one). By default, we take <code>time_cfl</code> to 0.3. We additionally request time step to be upper-bounded by a user-defined parameter <code>time_save</code> (default: 1 year).</p> <p>Among the parameters of this module <code>time_start</code> and <code>time_end</code> defines the simulation starting and ending times, while <code>time_save</code> defines the frequency at which results must be saved (default: 10 years).</p> <p>A bit more details on the time step stability conditionsis given in the following paper.</p> <pre><code>@article{jouvet2022deep,\n  author =        {Jouvet, Guillaume and Cordonnier, Guillaume and\n                   Kim, Byungsoo and L{\\\"u}thi, Martin and\n                   Vieli, Andreas and Aschwanden, Andy},\n  journal =       {Journal of Glaciology},\n  number =        {270},\n  pages =         {651--664},\n  publisher =     {Cambridge University Press},\n  title =         {Deep learning speeds up ice flow modelling by several\n                   orders of magnitude},\n  volume =        {68},\n  year =          {2022},\n  doi =           {10.1017/jog.2021.120},\n}\n</code></pre>"},{"location":"modules/vert_flow/","title":"vert_flow","text":""},{"location":"modules/vert_flow/#igm-module-vert_flow","title":"vert_flow","text":""},{"location":"modules/vert_flow/#title","title":"IGM module <code>vert_flow</code>","text":""},{"location":"modules/vert_flow/#description","title":"Description:","text":"<p>This IGM module computes the vertical component (providing state.W) of the velocity from the horizontal components (state.U, computed from an emulation of the Blatter-Pattyn model in the module <code>iceflow</code>) by integrating the imcompressibility condition. This module is typically needed prior calling module <code>particle</code> for 3D particle trajectory integration, or module <code>enthalpy</code> for computing 3D advection-diffusion of the enthalpy.</p>"},{"location":"modules/write_ncdf/","title":"write_ncdf","text":""},{"location":"modules/write_ncdf/#igm-module-write_ncdf","title":"write_ncdf","text":""},{"location":"modules/write_ncdf/#title","title":"IGM module <code>write_ncdf</code>","text":""},{"location":"modules/write_ncdf/#description","title":"Description:","text":"<p>This IGM module writes 2D field variables defined in the paramer list <code>wncd_vars_to_save</code> into the NetCDF output file given by parameter <code>wncd_output_file</code> (default output.nc). The saving frequency is given by parameter <code>time_save</code> defined in module <code>time</code>.</p>"},{"location":"modules/write_particles/","title":"write_particles","text":""},{"location":"modules/write_particles/#igm-module-write_particles","title":"write_particles","text":""},{"location":"modules/write_particles/#title","title":"IGM module <code>write_particles</code>","text":""},{"location":"modules/write_particles/#description","title":"Description:","text":"<p>This IGM module writes particle time-position in csv files computed by module <code>particles</code>. The saving frequency is given by parameter <code>time_save</code> defined in module <code>time</code>.</p> <p>The data are stored in folder 'trajectory' (created if does not exist). Files 'traj-TIME.csv' reports the space-time position of the particles at time TIME with the following structure:</p> <pre><code>ID,  state.xpos,  state.ypos,  state.zpos, state.rhpos,  state.tpos, state.englt\nX,            X,           X,           X,           X,           X,           X,\nX,            X,           X,           X,           X,           X,           X,\nX,            X,           X,           X,           X,           X,           X,\n</code></pre> <p>providing in turn the particle ID, x,y,z positions, the relative height within the ice column, the seeding time, and the englacial time.</p>"},{"location":"modules/write_tif/","title":"write_tif","text":""},{"location":"modules/write_tif/#igm-module-write_tif","title":"write_tif","text":""},{"location":"modules/write_tif/#title","title":"IGM module <code>write_tif</code>","text":""},{"location":"modules/write_tif/#description","title":"Description:","text":"<p>This IGM module writes 2D field variables defined in the paramer list <code>wtif_vars_to_save</code> into tif output files. Files will be created with names composed by the variable name and the time (e.g., thk-000040.tif, usurf-000090.tif) in the working directory. The saving frequency is given by parameter <code>time_save</code> defined in module <code>time</code>. If input file were call with module <code>load_tif</code>, then the tif meta information are saved, and provided with the final tiff files.</p> <p>This module depends on the <code>rasterio</code> library.</p>"},{"location":"modules/write_ts/","title":"write_ts","text":""},{"location":"modules/write_ts/#igm-module-write_ts","title":"write_ts","text":""},{"location":"modules/write_ts/#title","title":"IGM module <code>write_ts</code>","text":""},{"location":"modules/write_ts/#description","title":"Description:","text":"<p>This IGM module writes time serie variables (ice glaciated area and volume) into the NetCDF output file defined by parameter <code>wts_output_file</code> (default output_ts.nc). The saving frequency is given by parameter <code>time_save</code> defined in module <code>time</code>.</p>"}]}